variables:
  DOCKER_FILE: $CI_PROJECT_DIR/docker/Dockerfile
  DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:$CI_COMMIT_REF_SLUG
  DOCKER_PRODUCTION: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DOCKER_REVIEW: $CI_REGISTRY_IMAGE/review:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA

stages:
  - build base
  - build
  - test
  - deploy
  - release
  - publish
  - cleanup

include:
  - template: Code-Quality.gitlab-ci.yml

# To use Kaniko extend the job and set the variable for DOCKER_DESTINATION and optionally DOCKER_FILE
.use-kaniko:
  tags:
    - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: ['']
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_DESTINATION

build_base:
  stage: build base
  extends: .use-kaniko
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --target=base-image --destination $DOCKER_BASE_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - docker/Dockerfile
        - package.json
        - package-lock.json
    - if: $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true

build_production:
  stage: build
  extends: .use-kaniko
  variables:
    KUBERNETES_MEMORY_REQUEST: 6Gi
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        ENV_CONTENT: $ENV_STAGING
        DOCKER_DESTINATION: $DOCKER_PRODUCTION
    - if: $CI_COMMIT_BRANCH == "beta"
      variables:
        ENV_CONTENT: $ENV_BETA
        DOCKER_DESTINATION: $DOCKER_PRODUCTION
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        ENV_CONTENT: $ENV_BETA
        DOCKER_DESTINATION: $DOCKER_PRODUCTION
        DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:main
    - if: $CI_COMMIT_BRANCH
      variables:
        ENV_CONTENT: $ENV_REVIEW
        DOCKER_DESTINATION: $DOCKER_REVIEW
  script:
    - echo "$ENV_CONTENT" >> .env.production.local
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_DESTINATION --build-arg BASE_IMAGE=$DOCKER_BASE_IMAGE

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG)
      when: never
    - if: $CI_COMMIT_BRANCH

test_package_lock:
  stage: test
  image: node:lts-alpine
  needs: []
  script:
    - npm i -g package-lock-check
    - npx package-lock-check

deploy_production:
  stage: deploy
  image: curlimages/curl
  needs:
    - job: build_production
    - job: code_quality
      optional: true
    - job: test_package_lock
  variables:
    GIT_STRATEGY: none
    ASKANNA_DEPLOY_BRANCH: main
    ASKANNA_DEPLOY_PRODUCT: askanna-frontend
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
      variables:
        ENV_HOST: $DOMAIN_STAGING
        ENV_NAME: master
        DOCKER_IMAGE: $DOCKER_PRODUCTION
    - if: ($CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/)
      when: manual
      variables:
        ENV_HOST: $DOMAIN_BETA
        ENV_NAME: beta
        DOCKER_IMAGE: $DOCKER_PRODUCTION
  tags:
    - kubernetes
  environment:
    name: $ENV_NAME
    url: https://$ENV_HOST
  script:
    - curl -X POST -F token=$CI_JOB_TOKEN -F ref=$ASKANNA_DEPLOY_BRANCH -F variables[product]=$ASKANNA_DEPLOY_PRODUCT -F variables[action]=deploy -F variables[env_name]=$ENV_NAME -F variables[env_host]=$ENV_HOST -F variables[frontend_image]=$DOCKER_IMAGE $ASKANNA_DEPLOY_TRIGGER

deploy_review:
  stage: deploy
  image: gitlab.askanna.io:4567/askanna/services/helm
  needs:
    - job: build_production
    - job: test_package_lock
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG)
      when: never
    - if: $CI_COMMIT_BRANCH
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.$DOMAIN_REVIEW
    on_stop: stop_review
    auto_stop_in: 2 weeks
  tags:
    - kubernetes
  script:
    - init_k8s
    - helm upgrade
      --install
      --set app.image="$DOCKER_REVIEW"
      --set app.host="$CI_ENVIRONMENT_SLUG.$DOMAIN_REVIEW"
      --set deployment.minReplicas=1
      --wait
      $CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG
      ./k8s-chart

stop_review:
  stage: cleanup
  image: gitlab.askanna.io:4567/askanna/services/helm
  needs:
    - job: deploy_review
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "beta" || $CI_COMMIT_TAG)
      when: never
    - if: $CI_COMMIT_BRANCH
      when: manual
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  allow_failure: true
  tags:
    - kubernetes
  script:
    - init_k8s
    - helm uninstall $CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG

.functions: &functions |
  # Functions
  function init_k8s() {
      gcloud auth activate-service-account --project $GCP_PROJECT --key-file $GCP_SERVICE_ACCOUNT_FILE_AA_SERVICES
      gcloud container clusters get-credentials $GKE_CLUSTER_NAME --zone $GKE_CLUSTER_ZONE --project $GCP_PROJECT
  }

before_script:
  - *functions

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  script:
    - echo "Creating a new release..."
  release:
    tag_name: $CI_COMMIT_TAG
    description: $CI_COMMIT_TAG_MESSAGE

publish_to_gitlab:
  stage: publish
  needs:
    - job: build_production
    - job: deploy_production
      optional: true
    - job: release
      optional: true
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      variables:
        TARGET: HEAD:main
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        TARGET: refs/tags/$CI_COMMIT_TAG
  before_script:
    - apt-get update -y && apt-get install openssh-client git curl -y
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY_GITLAB_COM}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "hello@askanna.io"
    - git config --global user.name "AskAnna Robot"
  script:
    - git remote add gitlab git@gitlab.com:askanna/askanna-frontend.git
    - git push gitlab $TARGET

publish_release_to_gitlab:
  stage: publish
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: build_production
    - job: deploy_production
      optional: true
    - job: release
    - job: publish_to_gitlab
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  variables:
    GITLAB_PRIVATE_TOKEN: $GITLAB_COM_API_TOKEN
  script:
    - release-cli --server-url https://gitlab.com --project-id 43372103 create --tag-name $CI_COMMIT_TAG --description "$CI_COMMIT_TAG_MESSAGE"

publish_to_github:
  stage: publish
  needs:
    - job: build_production
    - job: deploy_production
      optional: true
    - job: release
      optional: true
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      variables:
        TARGET: HEAD:main
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        TARGET: refs/tags/$CI_COMMIT_TAG
  before_script:
    - apt-get update -y && apt-get install openssh-client git curl -y
    - eval $(ssh-agent -s)
    - echo "${SSH_PRIVATE_KEY_GITHUB_COM}" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "hello@askanna.io"
    - git config --global user.name "AskAnna Robot"
  script:
    - git remote add github git@github.com:askanna-io/askanna-frontend.git
    - git push github $TARGET

publish_release_to_github:
  image: ubuntu:22.04
  stage: publish
  needs:
    - job: build_production
    - job: deploy_production
      optional: true
    - job: release
    - job: publish_to_github
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
  variables:
    GH_TOKEN: $GITHUB_COM_API_TOKEN
  before_script:
    - apt-get update -y && apt-get install curl -y
    - curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
    - chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
    - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    - apt-get update -y && apt-get install gh -y
  script:
    - gh auth login --hostname github.com
    - gh release create $CI_COMMIT_TAG --verify-tag --title $CI_COMMIT_TAG --notes "$CI_COMMIT_TAG_MESSAGE" --repo askanna-io/askanna-frontend
