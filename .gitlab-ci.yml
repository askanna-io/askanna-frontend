variables:
  GCP_PROJECT: askanna-services
  GKE_CLUSTER_NAME: review-and-runners
  GKE_CLUSTER_ZONE: europe-west1-d
  MASTER_DOMAIN: askanna.eu
  BETA_DOMAIN: beta.askanna.eu
  DEVOPS_DOMAIN: frontend.askanna.dev
  DOCKER_BASE_IMAGE: $CI_REGISTRY_IMAGE/base:$CI_COMMIT_REF_SLUG
  DOCKER_REVIEW: $CI_REGISTRY_IMAGE/review:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA

include:
  - template: Code-Quality.gitlab-ci.yml

stages:
  - build-base
  - build-deploy
  - test
  - deploy
  - cleanup

# To use Kaniko extend the job and set variable for DOCKER_DESTINATION and DOCKERFILE
.use-kaniko:
  tags:
    - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    DOCKER_FILE: $CI_PROJECT_DIR/compose/Dockerfile.deploy
    DOCKER_DESTINATION: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_DESTINATION

build_base:
  stage: build-base
  extends:
    - .use-kaniko
  variables:
    DOCKER_FILE: $CI_PROJECT_DIR/compose/Dockerfile.base    
  script:
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_BASE_IMAGE
  rules:
    - if: $CI_COMMIT_BRANCH
      changes:
        - compose/Dockerfile.base
        - package.json
        - package-lock.json
    - if: $CI_COMMIT_BRANCH
      when: manual
      allow_failure: true

build_master:
  stage: build-deploy
  extends:
    - .use-kaniko
  only:
    - master

build_review:
  stage: build-deploy
  extends:
    - .use-kaniko 
  script:
    - cp .env.review .env.production.local
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_REVIEW --build-arg BASE_IMAGE=$DOCKER_BASE_IMAGE
  only:
    - branches
  except:
    - beta
    - master

build_beta:
  stage: build-deploy
  extends:
    - .use-kaniko
  script:
    - cp .env.beta .env.production.local
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKER_FILE --destination $DOCKER_DESTINATION --build-arg BASE_IMAGE=$DOCKER_BASE_IMAGE
  only:
    - beta

code_quality:
  stage: test
  tags:
    - docker

.deploy: &deploy
  variables:
    GIT_STRATEGY: none
  image: curlimages/curl
  stage: deploy
  tags:
    - kubernetes
  script:
    - curl -X POST -F token=${DEPLOY_TOKEN} -F ref=master -F variables[product]=frontend -F variables[branch]=${CI_COMMIT_REF_SLUG} -F variables[action]=deploy -F variables[slug]=${CI_ENVIRONMENT_SLUG} ${TRIGGER_URL}

deploy_master:
  <<: *deploy
  environment:
    name: master
    url: https://${MASTER_DOMAIN}
  only:
    - master

deploy_beta:
  <<: *deploy
  environment:
    name: beta
    url: https://${BETA_DOMAIN}
  only:
    - beta

deploy_review:
  stage: deploy
  needs: [build_review]
  image: gitlab.askanna.io:4567/askanna/services/helm
  tags:
    - kubernetes
  script:
    - init_k8s
    - helm upgrade
      --install
      --set app.image="$DOCKER_REVIEW"
      --set app.host="$CI_ENVIRONMENT_SLUG.$DEVOPS_DOMAIN"
      --set deployment.minReplicas=1
      --wait
      $CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG
      ./k8s-chart
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://$CI_ENVIRONMENT_SLUG.$DEVOPS_DOMAIN
    on_stop: stop_review
    auto_stop_in: 2 weeks
  only:
    - branches
  except:
    - master
    - beta

stop_review:
  stage: cleanup
  image: gitlab.askanna.io:4567/askanna/services/helm
  variables:
    GIT_STRATEGY: none
  script:
    - init_k8s
    - helm uninstall $CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    - branches
  except:
    - master
    - beta

.functions: &functions |
    # Functions
    function init_k8s() {
        gcloud auth activate-service-account --project $GCP_PROJECT --key-file $GCP_SERVICE_ACCOUNT_FILE_AA_SERVICES
        gcloud container clusters get-credentials $GKE_CLUSTER_NAME --zone $GKE_CLUSTER_ZONE --project $GCP_PROJECT
    }

before_script:
  - *functions
